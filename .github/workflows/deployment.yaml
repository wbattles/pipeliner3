name: Terraform Workflow

on:
  workflow_dispatch:
    inputs: 
      INSTANCE_NAME:
        description: "Name of the EC2 instance"
        required: true
      LAUNCH_TEMPLATE:
        description: "Lauch template for the EC2 instance"
        required: true
        type: choice
        options:
          # ubuntu server 24.04
          - ubuntu-template
          # windows server 2025 base
          - windows-template
          # amazon linux 2023
          - amazon-linux-template

  push:
    branches:
      - main
      - branch-test
    paths:
      - "terraform/**"
      - "application/**"
      - ".github/workflows/**"

permissions:
  id-token: write
  contents: read
  
jobs:
  terraform:
    name: Terraform deploy
    runs-on: ubuntu-latest
    defaults:
     run:
      working-directory: ./terraform/environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Manual run
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "TF_VAR_instance_name=${{ github.event.inputs.INSTANCE_NAME }}" >> $GITHUB_ENV
          case "${{ github.event.inputs.LAUNCH_TEMPLATE }}" in
            "ubuntu-template")
              echo "TF_VAR_launch_template_id=${{ secrets.UBUNTU_TEMPLATE }}" >> $GITHUB_ENV
              ;;
            "windows-template")
              echo "TF_VAR_launch_template_id=${{ secrets.WINDOWS_TEMPLATE }}" >> $GITHUB_ENV
              ;;
            "amazon-linux-template")
              echo "TF_VAR_launch_template_id=${{ secrets.AMAZON_LINUX_TEMPLATE }}" >> $GITHUB_ENV
              ;;
            *)
              echo "Unknown launch template: ${{ github.event.inputs.LAUNCH_TEMPLATE }}"
              exit 1
              ;;
          esac          

      - name: Auto run
        if: github.event_name != 'workflow_dispatch'
        run: |
          echo "TF_VAR_instance_name=${{ vars.INSTANCE_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_ami_id=${{ vars.AMI_ID }}" >> $GITHUB_ENV

      - name: Other Terraform variables
        run: |
          echo "TF_VAR_instance_type=${{ vars.INSTANCE_TYPE }}" >> $GITHUB_ENV
          echo "TF_VAR_vpc_id=${{ secrets.VPC_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_subnet_id=${{ secrets.SUBNET_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_key_name=${{ secrets.KEY_NAME }}" >> $GITHUB_ENV

      - name: Terraform init
        run: |
          terraform init

      - name: Terraform plan
        run: |
          terraform plan

      - name: Terraform apply
        run: |
          terraform apply -auto-approve
      
      - name: Get Terraform outputs
        id: terraform-outputs
        run: |
          set +x
          INSTANCE_ID=$(terraform output -raw instance_id)
          echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
    outputs:
      terraform-outputs: ${{ steps.terraform-outputs.outputs.instance_id }}

  application:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' && github.event.inputs.LAUNCH_TEMPLATE == 'ubuntu-template'
    name: App deploy
    needs: terraform
    runs-on: ubuntu-latest
    defaults:
     run:
      working-directory: ./application

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Retrieve EC2 Instance details
        run: |
          echo "INSTANCE_ID=${{ needs.terraform.outputs.terraform-outputs.instance_id }}" >> $GITHUB_ENV
          echo "Using EC2 instance: ${{ needs.terraform.outputs.terraform-outputs.instance_id }}"

      - name: Deploy via SSM
        run: |
          cat ../scripts/setup-app.sh > deploy_temp.sh
          
          ENCODED_SCRIPT=$(base64 -w 0 deploy_temp.sh)
          
          aws ssm send-command \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters "{
              \"commands\":[
                \"echo $ENCODED_SCRIPT | base64 -d > /home/ubuntu/deploy.sh\",
                \"chmod +x /home/ubuntu/deploy.sh\",
                \"export AWS_DEFAULT_REGION=us-east-1\",
                \"export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}\",
                \"export ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}\",
                \"bash /home/ubuntu/deploy.sh\"
              ]
            }" \
            --output text